<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>
  <name>lineDetector</name>
  <doxygen-group>lineDetector</doxygen-group>
  <description>This module takes as input the RGB image containing two lines composed of a set of ArUco markers and publishes the estimated pose of the markers with respect to the robot camera and root.</description>
  <copypolicy> Released under the terms of the BSD 3-Clause License.</copypolicy>
  <version>0.6.0</version>

  <description-long>
   This module takes as input the RGB image containing two lines composed of a set of markers and publishes the estimated poses of the markers with respect to the camera and to robot root.
   It makes use of an OpenCV ArUco Board of 6x1 markers. The used boards can be found in `modules/lineDetector/app/conf` (the two images were sticked togheter for printing a marker big enough to be visible from a certain distance).
   Gazebo models of the ArUco Boards can be found in `app/gazebo/tug` (note that the variable `GAZEBO_MODEL_PATH` has to point to this folder).
   The start-line is used as world frame for the TUG app, with `x` pointing along the side of the line, `y` pointing backward and `z` upward.
   The detected start and finish lines are published into the \ref objectsPropertiesCollector, with the pose estimated with respect to the world frame (`pose_world`), and the size of the line, as following:

   \code
   ((finish-line ((pose_world (x y z ax ay az theta)) (size (width height)))) (id opc_id))
   \endcode

  </description-long>

  <arguments>
    <param default="lineDetector" desc="The module's name; all the open ports will be tagged with the prefix /name.">name</param>
    <param default="0.1" desc="Periodicity of the module.">period</param>
    <param default="2" desc="Number of lines handled.">nlines</param>
    <param default="30" desc="Order of the median filter applied to the estimated lines poses.">line-filter-order</param>
    <param default="(6 6)" desc="Vector containing the number of markers along X direction, for the start and the finish line respectively.">nx</param>
    <param default="(1 1)" desc="Vector containing the number of markers along Y direction, for the start and the finish line respectively.">ny</param>
    <param default="(0.13 0.13)" desc="Vector containing the marker's length, for the start and the finish line respectively [m].">marker-size</param>
    <param default="(0.005 0.005)" desc="Vector containing the distance between markers, for the start and the finish line respectively [m].">marker-dist</param>
    <param default="false" desc="If true, lines poses are obtained directly from the gazebo world scenario.">simulation</param>
    <param default="false" desc="If true, it uses the previously estimated pose of the line as a guess for the estimation of the current line">use-initial-guess</param>
    <param default="(54.0 42.0 160.0 120.0)" desc="Camera's intrinsics if specified from file.">camera::intrinsics</param>
    <param default="/depthCamera" desc="Camera's remote to connect to">camera::remote</param>
  </arguments>

  <authors>
    <author email="valentina.vasco@iit.it"> Valentina Vasco </author>
  </authors>

  <data>
      <input>
          <type>ImageOfPixelRgb</type>
          <port>/lineDetector/img:i</port>
          <description>
            Receives the RGB image.
          </description>
      </input>
      <input>
          <type>Property</type>
          <port>/lineDetector/gaze/state:i</port>
          <description>
            Retrieves the current pose of the camera.
          </description>
      </input>
      <output>
          <type>ImageOfPixelRgb</type>
          <port>/lineDetector/img:o</port>
          <description>
            Streams out the input image with detected axes.
          </description>
      </output>
      <output>
          <type>rpc</type>
          <port>/lineDetector/cam:rpc</port>
          <description>
            Retrieves intrinsics from the camera.
          </description>
      </output>
      <output>
          <type>rpc</type>
          <port>/lineDetector/opc:rpc</port>
          <description>
            Adds the start and the finish line to \ref objectsPropertiesCollector.
          </description>
      </output>
      <output>
          <type>rpc</type>
          <port>/lineDetector/nav:rpc</port>
          <description>
            Retrieves the current pose of the base.
          </description>
      </output>
      <output>
          <type>rpc</type>
          <port>/lineDetector/viewer:rpc</port>
          <description>
            Sends commands to \ref skeletonViewer to draw the lines.
          </description>
      </output>
      <output>
          <type>rpc</type>
          <port>/lineDetector/gazebo:rpc</port>
          <description>
            Sends command to gazebo plugin \ref tuginterface, if simulation is set to true.
          </description>
      </output>
  </data>

  <services>
    <server>
      <type>lineDetector_IDL</type>
      <idl>idl.thrift</idl>
      <port>/lineDetector/cmd:rpc</port>
      <description>service port</description>
    </server>
  </services>

</module>
