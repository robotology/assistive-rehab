<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>
  <name>navController</name>
  <doxygen-group>navController</doxygen-group>
  <description>This module is responsible for interfacing with the robot's base to implement the navigation part.</description>
  <copypolicy>Released under the terms of the BSD 3-Clause License.</copypolicy>
  <version>0.6.0</version>

  <description-long>
   This moudule aims to keep the distance from a specified skeleton fixed. To this end, the robot will be navigating along an imaginary straight track.
  </description-long>

  <arguments>
    <param default="0.05" desc="Periodicity of the module (s).">period</param>
    <param default="0.3" desc="The magnitude of the linear velocity used in the bang-bang controller (m/s).">velocity-linear-magnitude</param>
    <param default="20.0" desc="The maximum angular velocity used in the PID controller (deg/s).">velocity-angular-saturation</param>
    <param default="5.0" desc="Angular tolerance for rotating (deg/s).">angular-tolerance</param>
    <param default="2.0" desc="The target distance from the skeleton that the controller will attempt to keep (m).">distance-target</param>
    <param default="0.2" desc="The low threshold of the hsyteresis on the distance error (m).">distance-hysteresis-low</param>
    <param default="0.3" desc="The high threshold of the hsyteresis on the distance error (m).">distance-hysteresis-high</param>
    <param default="0.1" desc="The maximum velocity to consider the robot steady (deg/s).">base-stop-threshold</param>
    <param default="0" desc="Run module without connection to baseControl, useful for offline replay of experiments.">offline_mode</param>
    <param default="0" desc="Stream odometry data as (x: 0, y: 0, theta: 0) if enabled. Useful offline.">no_odom_data</param>
    <param default="0" desc="Uses the first odometry value acquired will for resetting.">force_odom_reset</param>
  </arguments>

  <authors>
    <author email="ugo.pattacini@iit.it"> Ugo Pattacini </author>
  </authors>

  <data>
      <input>
          <type>Bottle</type>
          <port>/navController/opc:i</port>
          <description>
            Receives the OPC broadcast.
          </description>
      </input>
      <input>
          <type>Bottle</type>
          <port>/navController/base_state:i</port>
          <description>
            Receives information about the robot base.
          </description>
      </input>
      <output>
          <type>Bottle</type>
          <port>/navController/state:o</port>
          <description>
            Outputs the internal state as (robot-state {idle|track|nav}) (robot-location (x y theta)) (robot-velocity (v_x v_theta)) [(target-location (x y theta heading))] [(skeleton-tag tag) (skeleton-location (x y))]
          </description>
      </output>
  </data>

  <services>
    <server>
      <type>navController_IDL</type>
      <idl>idl.thrift</idl>
      <port>/navController/rpc</port>
      <description>service port</description>
    </server>
  </services>

</module>
