/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_SKELETONVIEWER_IDL_H
#define YARP_THRIFT_GENERATOR_SERVICE_SKELETONVIEWER_IDL_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

/**
 * skeletonViewer_IDL
 * IDL Interface to skeletonViewer RPC services.
 */
class skeletonViewer_IDL :
        public yarp::os::Wire
{
public:
    // Constructor
    skeletonViewer_IDL();

    /**
     * Set the camera position in world coordinates.
     * @param x is the x-coordinate (meters).
     * @param y is the y-coordinate (meters).
     * @param z is the z-coordinate (meters).
     * @return true/false on success/failure.
     */
    virtual bool set_camera_position(const double x, const double y, const double z);

    /**
     * Set the camera focal point in world coordinates.
     * @param x is the x-coordinate (meters).
     * @param y is the y-coordinate (meters).
     * @param z is the z-coordinate (meters).
     * @return true/false on success/failure.
     */
    virtual bool set_camera_focalpoint(const double x, const double y, const double z);

    /**
     * Set the camera view up direction in world coordinates.
     * @param x is the x-coordinate (meters).
     * @param y is the y-coordinate (meters).
     * @param z is the z-coordinate (meters).
     * @return true/false on success/failure.
     */
    virtual bool set_camera_viewup(const double x, const double y, const double z);

    /**
     * Create a line.
     * @param name is the name of the line.
     * @param x0 the x-coordinate of the line origin (meters).
     * @param y0 the y-coordinate of the line origin (meters).
     * @param z0 the z-coordinate of the line origin (meters).
     * @param x1 the x-coordinate of the line end (meters).
     * @param y1 the y-coordinate of the line end (meters).
     * @param z1 the z-coordinate of the line end (meters).
     * @param r is the red channel of the line color [0,1].
     * @param g is the green channel of the line color [0,1].
     * @param b is the blue channel of the line color [0,1].
     * @return true/false on success/failure.
     */
    virtual bool create_line(const std::string& name, const double x0, const double y0, const double z0, const double x1, const double y1, const double z1, const double r, const double g, const double b);

    /**
     * Delete a line.
     * @param name is the name of the line to delete.
     * @return true/false on success/failure.
     */
    virtual bool delete_line(const std::string& name);

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_SKELETONVIEWER_IDL_H
