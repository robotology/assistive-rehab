/*
 * Copyright (C) 2006-2020 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_TUGINTERFACESERVER_H
#define YARP_THRIFT_GENERATOR_SERVICE_TUGINTERFACESERVER_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <Animation.h>
#include <Pose.h>
#include <yarp/os/Property.h>

class TugInterfaceServer :
        public yarp::os::Wire
{
public:
    // Constructor
    TugInterfaceServer();

    /**
     * Stop script for moving actor.
     * @return returns true or false on success / failure
     */
    virtual bool stop();

    /**
     * Set walking speed for reaching the target.
     * @param speed velocity to set.
     * @return returns true or false on success / failure
     */
    virtual bool setSpeed(const double speed);

    /**
     * Get walking speed.
     * @return returns walking speed
     */
    virtual double getSpeed();

    /**
     * Get the list of animations associated with the actor.
     * @return returns list of animations associated with the actor.
     */
    virtual std::vector<std::string> getAnimationList();

    /**
     * Play specified animation.
     * @param animation in the form (name, id). If not specified, all animations are played according to their id. The id has to be specified if the animation is played several times during the script.
     * @param complete if true, the whole script is played starting from the specified animation.
     * @return returns true / false on success / failure.
     */
    virtual bool play(const Animation& animation, const bool complete = 0);

    /**
     * Get model position as defined in world, with respect to start-line.
     * @param model_name name string defining the name of the model.
     * @return a property-like object in the form
     *         (pose_world (x y z ax ay az theta)).
     */
    virtual yarp::os::Property getModelPos(const std::string& model_name);

    /**
     * Pause actor.
     * @param time [optional] seconds during which actor is paused (if time > 0).
     * @return returns true / false on success / failure.
     */
    virtual bool pause(const double time = 0);

    /**
     * Returns true is actor is active.
     * @return returns true / false if actor is active / paused.
     */
    virtual bool isActive();

    /**
     * Play from last animation.
     * @param complete if true, the whole script is played starting from last stop.
     * @return returns true / false on success / failure.
     */
    virtual bool playFromLast(const bool complete = 0);

    /**
     * Get current animation being played.
     * @return returns string defining the current animation being played.
     */
    virtual std::string getState();

    /**
     * Reach a target location.
     * @param p pose in the form x,y,theta.
     * @return true/false on success/failure.
     */
    virtual bool goTo(const Pose& p);

    /**
     * Blocking version of reach for a target location. The service returns ack only
     * when target is reached.
     * @param p pose in the form x,y,theta.
     * @return true/false on success/failure.
     */
    virtual bool goToWait(const Pose& p);

    /**
     * Reach a sequence of targets.
     * @param p list of poses in the form x1,y1,theta1,x2,y2,theta2.
     * @return true/false on success/failure.
     */
    virtual bool goToSeq(const std::vector<double>& p);

    /**
     * Set target to reach during walk animation.
     * @param p pose in the form x,y,theta.
     * @return returns true or false on success / failure
     */
    virtual bool setTarget(const Pose& p);

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_TUGINTERFACESERVER_H
