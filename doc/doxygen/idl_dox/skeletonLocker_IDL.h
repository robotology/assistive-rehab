/*
 * Copyright (C) 2006-2020 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_SKELETONLOCKER_IDL_H
#define YARP_THRIFT_GENERATOR_SERVICE_SKELETONLOCKER_IDL_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

/**
 * skeletonLocker_IDL
 * IDL Interface to Skeleton Locker services.
 */
class skeletonLocker_IDL :
        public yarp::os::Wire
{
public:
    // Constructor
    skeletonLocker_IDL();

    /**
     * Set the tag of the skeleton to lock.
     * @param tag of the skeleton to lock.
     * @return true/false on success/failure.
     */
    virtual bool set_skeleton_tag(const std::string& tag);

    /**
     * Remove locked skeleton.
     * @return true/false on success/failure.
     */
    virtual bool remove_locked();

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_SKELETONLOCKER_IDL_H
