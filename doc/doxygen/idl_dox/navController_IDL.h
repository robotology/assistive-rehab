/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_NAVCONTROLLER_IDL_H
#define YARP_THRIFT_GENERATOR_SERVICE_NAVCONTROLLER_IDL_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <yarp/os/Property.h>

/**
 * navController_IDL
 * IDL Interface to Navigation Controller services.
 */
class navController_IDL :
        public yarp::os::Wire
{
public:
    // Constructor
    navController_IDL();

    /**
     * Reach for a target location.
     * @param x is the x-coordinate of the target location (meters).
     * @param y is the y-coordinate of the target location (meters).
     * @param theta is the theta-coordinate of the target location (degrees).
     * @param heading_rear is true to specify if the robot has to drive backward.
     * @return true/false on success/failure.
     */
    virtual bool go_to(const double x, const double y, const double theta, const bool heading_rear = 0);

    /**
     * Blocking version of reach for a target location. The service returns ack only
     * when navigation is done.
     * @param x is the x-coordinate of the target location (meters).
     * @param y is the y-coordinate of the target location (meters).
     * @param theta is the theta-coordinate of the target location (degrees).
     * @param heading_rear is true to specify if the robot has to drive backward.
     * @param timeout sets up optionally a timeout given in seconds, if > 0.
     * @return true/false on success/[failure | timeout occurred].
     */
    virtual bool go_to_wait(const double x, const double y, const double theta, const bool heading_rear = 0, const std::int32_t timeout = 0);

    /**
     * Start navigation while controlling distance from the specified skeleton.
     * @param skeleton_tag is the skeleton's tag.
     * @return true/false on success/failure.
     */
    virtual bool track_skeleton(const std::string& skeleton_tag);

    /**
     * Query if navigation is underway.
     * @return true if navigation is being currently performed.
     */
    virtual bool is_navigating();

    /**
     * Stop navigation.
     * @return true/false on success/failure.
     */
    virtual bool stop();

    /**
     * Reset odometry.
     * @param x_0 can optionally become the current x-coordinate (meters).
     * @param y_0 can optionally become the current y-coordinate (meters).
     * @param theta_0 can optionally become the current theta-coordinate (degrees).
     * @return true/false on success/failure.
     */
    virtual bool reset_odometry(const double x_0 = 0, const double y_0 = 0, const double theta_0 = 0);

    /**
     * Query which skeleton is currently under control.
     * @return the name of the skeleton; empty otherwise.
     */
    virtual std::string which_skeleton();

    /**
     * Retrieve internal state.
     * @return a property-like object containing the state
     *         in the form (robot-state {idle|track|nav}) (robot-location (x y theta))
     *         (robot-velocity (v_x v_theta)) [(target-location (x y theta heading))]
     *         [(skeleton-tag tag) (skeleton-location (x y))].
     */
    virtual yarp::os::Property get_state();

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_NAVCONTROLLER_IDL_H
