# Run a sngle container with the command:
# docker run -it --network host --gpus all --mount type=bind,source=${HOME}/.config/yarp,target=/root/.config/yarp ghcr.io/robotology/assistive-rehab:v2022.05.2-openpose bash

# Run the swarm with the desired profile with:
# docker compose -f docker-compose-replay.yml --profile <datadump or replay or both> up
# If you do not specify a profile, compose will launch all containers

version: "3.7"

# Create alias for container running gpu inference
x-yarp-openpose: &yarp-openpose
  image: ghcr.io/robotology/assistive-rehab:v2022.05.2-openpose
  environment:
    - DISPLAY=${DISPLAY}
    - QT_X11_NO_MITSHM=1
    - XAUTHORITY=/root/.Xauthority
  volumes:
    - "/tmp/.X11-unix:/tmp/.X11-unix"
    - "${XAUTHORITY}:/root/.Xauthority"
    - "${HOME}/.config/yarp:/root/.config/yarp"
  network_mode: "host"
  privileged: true

# Create alias for container running assistive-rehab modules
x-fdg-basic: &fdg-basic
  image: ghcr.io/robotology/assistive-rehab:v2022.05.2-basic
  environment:
    - DISPLAY=${DISPLAY}
    - QT_X11_NO_MITSHM=1
    - XAUTHORITY=/root/.Xauthority
  volumes:
    - "/tmp/.X11-unix:/tmp/.X11-unix"
    - "${XAUTHORITY}:/root/.Xauthority"
    - "${HOME}/.config/yarp:/root/.config/yarp"
    - "${HOME}/skld:/root/skeletonDumper"
    - "${HOME}/etapas-results/motion-analysis:/root/.local/share/yarp/contexts/motionAnalyzer" #for saving the results from motionAnalyzer
  network_mode: "host"
  privileged: true

services:

  yarprun:
    <<: *fdg-basic
    command: bash -c "yarp run --server /container --log"
    profiles: ["datadump", "replay"]

  y_openpose:
    <<: *yarp-openpose
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: sh -c "yarpOpenPose --model_folder /projects/openpose/models --img_resolution 320x240 --face_enable false --hand_enable false --num_scales 1"
    profiles: ["cuda"]

  gazeController:
    <<: *fdg-basic
    restart: on-failure
    command: sh -c "yarp wait /cer/head/command:i; yarp wait /cer/head/rpc:i; yarp wait /cer/head/state:o; cer_gaze-controller --cameras::file /projects/cer/build/share/CER/contexts/cameraCalibration/cerEyes_320x240.ini"
    profiles: ["datadump"]

  navController:
    <<: *fdg-basic
    command: sh -c "yarp wait /baseControl/rpc; yarp wait /odometry2D_nws_yarp/odometry:o; yarp wait /baseControl/input/command:i; navController --velocity-angular-saturation 15.0 --distance-target 2.5"
    profiles: ["datadump"]

  robotSkeletonPublisher:
    <<: *fdg-basic
    command: sh -c "yarp wait /cer/head/command:i; yarp wait /cer/head/rpc:i; yarp wait /cer/head/state:o; yarp wait /cer/head/stateExt:o; yarp wait /cer/torso/command:i; yarp wait /cer/torso/rpc:i; yarp wait /cer/torso/state:o; yarp wait /cer/torso/stateExt:o; yarp wait /cer/torso_tripod/command:i; yarp wait /cer/torso_tripod/rpc:i; yarp wait /cer/torso_tripod/state:o; yarp wait /cer/torso_tripod/stateExt:o; yarp wait /cer/left_arm/command:i; yarp wait /cer/left_arm/rpc:i; yarp wait /cer/left_arm/state:o; yarp wait /cer/left_arm/stateExt:o; yarp wait /cer/right_arm/command:i; yarp wait /cer/right_arm/rpc:i; yarp wait /cer/right_arm/state:o; yarp wait /cer/right_arm/stateExt:o; yarp wait /cer/left_wrist_tripod/command:i; yarp wait /cer/left_wrist_tripod/rpc:i; yarp wait /cer/left_wrist_tripod/state:o; yarp wait /cer/left_wrist_tripod/stateExt:o; yarp wait /cer/right_wrist_tripod/command:i; yarp wait /cer/right_wrist_tripod/rpc:i; yarp wait /cer/right_wrist_tripod/state:o; yarp wait /cer/right_wrist_tripod/stateExt:o; robotSkeletonPublisher --robot cer"
    profiles: ["datadump"]

  dataplayer:
    <<: *fdg-basic
    command: bash -c "yarpdataplayer --withExtraTimeCol 2"
    profiles: ["replay"]
